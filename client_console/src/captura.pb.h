// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: captura.proto

#ifndef PROTOBUF_captura_2eproto__INCLUDED
#define PROTOBUF_captura_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_captura_2eproto();
void protobuf_AssignDesc_captura_2eproto();
void protobuf_ShutdownFile_captura_2eproto();

class Captura;

// ===================================================================

class Captura : public ::google::protobuf::Message {
 public:
  Captura();
  virtual ~Captura();

  Captura(const Captura& from);

  inline Captura& operator=(const Captura& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Captura& default_instance();

  void Swap(Captura* other);

  // implements Message ----------------------------------------------

  Captura* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Captura& from);
  void MergeFrom(const Captura& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string usuario = 1;
  inline bool has_usuario() const;
  inline void clear_usuario();
  static const int kUsuarioFieldNumber = 1;
  inline const ::std::string& usuario() const;
  inline void set_usuario(const ::std::string& value);
  inline void set_usuario(const char* value);
  inline void set_usuario(const char* value, size_t size);
  inline ::std::string* mutable_usuario();
  inline ::std::string* release_usuario();
  inline void set_allocated_usuario(::std::string* usuario);

  // required uint64 timestamp = 2;
  inline bool has_timestamp() const;
  inline void clear_timestamp();
  static const int kTimestampFieldNumber = 2;
  inline ::google::protobuf::uint64 timestamp() const;
  inline void set_timestamp(::google::protobuf::uint64 value);

  // required bytes imagen = 3;
  inline bool has_imagen() const;
  inline void clear_imagen();
  static const int kImagenFieldNumber = 3;
  inline const ::std::string& imagen() const;
  inline void set_imagen(const ::std::string& value);
  inline void set_imagen(const char* value);
  inline void set_imagen(const void* value, size_t size);
  inline ::std::string* mutable_imagen();
  inline ::std::string* release_imagen();
  inline void set_allocated_imagen(::std::string* imagen);

  // optional string dispositivo = 4;
  inline bool has_dispositivo() const;
  inline void clear_dispositivo();
  static const int kDispositivoFieldNumber = 4;
  inline const ::std::string& dispositivo() const;
  inline void set_dispositivo(const ::std::string& value);
  inline void set_dispositivo(const char* value);
  inline void set_dispositivo(const char* value, size_t size);
  inline ::std::string* mutable_dispositivo();
  inline ::std::string* release_dispositivo();
  inline void set_allocated_dispositivo(::std::string* dispositivo);

  // @@protoc_insertion_point(class_scope:Captura)
 private:
  inline void set_has_usuario();
  inline void clear_has_usuario();
  inline void set_has_timestamp();
  inline void clear_has_timestamp();
  inline void set_has_imagen();
  inline void clear_has_imagen();
  inline void set_has_dispositivo();
  inline void clear_has_dispositivo();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* usuario_;
  ::google::protobuf::uint64 timestamp_;
  ::std::string* imagen_;
  ::std::string* dispositivo_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_captura_2eproto();
  friend void protobuf_AssignDesc_captura_2eproto();
  friend void protobuf_ShutdownFile_captura_2eproto();

  void InitAsDefaultInstance();
  static Captura* default_instance_;
};
// ===================================================================


// ===================================================================

// Captura

// required string usuario = 1;
inline bool Captura::has_usuario() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Captura::set_has_usuario() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Captura::clear_has_usuario() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Captura::clear_usuario() {
  if (usuario_ != &::google::protobuf::internal::kEmptyString) {
    usuario_->clear();
  }
  clear_has_usuario();
}
inline const ::std::string& Captura::usuario() const {
  return *usuario_;
}
inline void Captura::set_usuario(const ::std::string& value) {
  set_has_usuario();
  if (usuario_ == &::google::protobuf::internal::kEmptyString) {
    usuario_ = new ::std::string;
  }
  usuario_->assign(value);
}
inline void Captura::set_usuario(const char* value) {
  set_has_usuario();
  if (usuario_ == &::google::protobuf::internal::kEmptyString) {
    usuario_ = new ::std::string;
  }
  usuario_->assign(value);
}
inline void Captura::set_usuario(const char* value, size_t size) {
  set_has_usuario();
  if (usuario_ == &::google::protobuf::internal::kEmptyString) {
    usuario_ = new ::std::string;
  }
  usuario_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Captura::mutable_usuario() {
  set_has_usuario();
  if (usuario_ == &::google::protobuf::internal::kEmptyString) {
    usuario_ = new ::std::string;
  }
  return usuario_;
}
inline ::std::string* Captura::release_usuario() {
  clear_has_usuario();
  if (usuario_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = usuario_;
    usuario_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Captura::set_allocated_usuario(::std::string* usuario) {
  if (usuario_ != &::google::protobuf::internal::kEmptyString) {
    delete usuario_;
  }
  if (usuario) {
    set_has_usuario();
    usuario_ = usuario;
  } else {
    clear_has_usuario();
    usuario_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required uint64 timestamp = 2;
inline bool Captura::has_timestamp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Captura::set_has_timestamp() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Captura::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Captura::clear_timestamp() {
  timestamp_ = GOOGLE_ULONGLONG(0);
  clear_has_timestamp();
}
inline ::google::protobuf::uint64 Captura::timestamp() const {
  return timestamp_;
}
inline void Captura::set_timestamp(::google::protobuf::uint64 value) {
  set_has_timestamp();
  timestamp_ = value;
}

// required bytes imagen = 3;
inline bool Captura::has_imagen() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Captura::set_has_imagen() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Captura::clear_has_imagen() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Captura::clear_imagen() {
  if (imagen_ != &::google::protobuf::internal::kEmptyString) {
    imagen_->clear();
  }
  clear_has_imagen();
}
inline const ::std::string& Captura::imagen() const {
  return *imagen_;
}
inline void Captura::set_imagen(const ::std::string& value) {
  set_has_imagen();
  if (imagen_ == &::google::protobuf::internal::kEmptyString) {
    imagen_ = new ::std::string;
  }
  imagen_->assign(value);
}
inline void Captura::set_imagen(const char* value) {
  set_has_imagen();
  if (imagen_ == &::google::protobuf::internal::kEmptyString) {
    imagen_ = new ::std::string;
  }
  imagen_->assign(value);
}
inline void Captura::set_imagen(const void* value, size_t size) {
  set_has_imagen();
  if (imagen_ == &::google::protobuf::internal::kEmptyString) {
    imagen_ = new ::std::string;
  }
  imagen_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Captura::mutable_imagen() {
  set_has_imagen();
  if (imagen_ == &::google::protobuf::internal::kEmptyString) {
    imagen_ = new ::std::string;
  }
  return imagen_;
}
inline ::std::string* Captura::release_imagen() {
  clear_has_imagen();
  if (imagen_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = imagen_;
    imagen_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Captura::set_allocated_imagen(::std::string* imagen) {
  if (imagen_ != &::google::protobuf::internal::kEmptyString) {
    delete imagen_;
  }
  if (imagen) {
    set_has_imagen();
    imagen_ = imagen;
  } else {
    clear_has_imagen();
    imagen_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string dispositivo = 4;
inline bool Captura::has_dispositivo() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Captura::set_has_dispositivo() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Captura::clear_has_dispositivo() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Captura::clear_dispositivo() {
  if (dispositivo_ != &::google::protobuf::internal::kEmptyString) {
    dispositivo_->clear();
  }
  clear_has_dispositivo();
}
inline const ::std::string& Captura::dispositivo() const {
  return *dispositivo_;
}
inline void Captura::set_dispositivo(const ::std::string& value) {
  set_has_dispositivo();
  if (dispositivo_ == &::google::protobuf::internal::kEmptyString) {
    dispositivo_ = new ::std::string;
  }
  dispositivo_->assign(value);
}
inline void Captura::set_dispositivo(const char* value) {
  set_has_dispositivo();
  if (dispositivo_ == &::google::protobuf::internal::kEmptyString) {
    dispositivo_ = new ::std::string;
  }
  dispositivo_->assign(value);
}
inline void Captura::set_dispositivo(const char* value, size_t size) {
  set_has_dispositivo();
  if (dispositivo_ == &::google::protobuf::internal::kEmptyString) {
    dispositivo_ = new ::std::string;
  }
  dispositivo_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Captura::mutable_dispositivo() {
  set_has_dispositivo();
  if (dispositivo_ == &::google::protobuf::internal::kEmptyString) {
    dispositivo_ = new ::std::string;
  }
  return dispositivo_;
}
inline ::std::string* Captura::release_dispositivo() {
  clear_has_dispositivo();
  if (dispositivo_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = dispositivo_;
    dispositivo_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Captura::set_allocated_dispositivo(::std::string* dispositivo) {
  if (dispositivo_ != &::google::protobuf::internal::kEmptyString) {
    delete dispositivo_;
  }
  if (dispositivo) {
    set_has_dispositivo();
    dispositivo_ = dispositivo;
  } else {
    clear_has_dispositivo();
    dispositivo_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_captura_2eproto__INCLUDED
